import re
import subprocess
import multiprocessing as mp
from .instruction import Instruction
from itertools import chain

from typing import Optional, TextIO

class ELFFile():

    _regex_function_header: re.Pattern
    _regex_instr: re.Pattern
    _regex_var_symbol: re.Pattern

    def __init__(self, file_path: str, nobatch: bool, include_path: Optional[str], cartridge_pairs: dict[str, str], springboard_functions: set[str], filter_functions: list[str]) -> None: ...

    def __getattr__(self, name: str) -> dict[str, list[tuple[int, int]]]: ...

    def __len__(self) -> int: ...

    def vars_loc(self) -> dict[str, list[tuple[int, int]]]: ...

    def fasm(self, outname: str, pool: Optional[mp.pool.Pool]) -> None: ...

    def _parse_nm_vars(self, text: list[str]) -> dict[str, list[tuple[int, int]]]: ...

    def _instr(self, fh: TextIO, instr: Instruction, current_cartridge: tuple[int, int]) -> tuple[int, tuple[int, int]]: ...

    def _instr_nobatch(self, fh: TextIO, instr: Instruction, current_cartridge: tuple[int, int]) -> tuple[int, tuple[int, int]]: ...

    def print_headers(self, fh: TextIO) -> None: ...

    def _parse_objdump(self, data: tuple[str, str, bool]) -> None: ...

    def _objdump(self, filterFile: Optional[str]) -> list[str]: ...

    def _nm(self) -> list[str]: ...
